#!/usr/bin/env bash

set -ex

exec 3>&1 # make stdout available as fd 3 for the result
exec 1>&2 # redirect all output to stderr for logging

source $(dirname $0)/common.sh

source=$1
cd $source

ssh_private_key_file=$HOME/.ssh/key

# Functions

attr() {
  local type=$1
  local name=$2
  local default=${3:-'""'}
  local required=$(test $# = "2" && echo true)
  local val=$(jq -r ".$type.$name // $default" < $payload)
  test "$required" = "true" && test -z "$val" && { echo "Must supply '$name' $type attribute"; exit 1; }
  echo $val
}

configure_ssh() {
  local ssh_private_key=$(attr source ssh_private_key)

  mkdir -p $(dirname $ssh_private_key_file)
  printf "$ssh_private_key" > $ssh_private_key_file
  chmod 600 $ssh_private_key_file

  mkdir -p $HOME/.ssh
  cat > $HOME/.ssh/config <<EOF
StrictHostKeyChecking no
LogLevel quiet
EOF
  chmod 600 $HOME/.ssh/config
}

install_requirements() {
  local requirements_file=$(attr source requirements "requirements.yml")
  test -f "$requirements_file" && ansible-galaxy install -r $requirements_file
}

configure_vault() {
  local vault_password=$(attr source vault_password '""')
  test -z "$vault_password" && return 0

  local vault_password_file=$(mktemp /tmp/ansible-playbook-resource.tmp.XXXXXX)
  printf "$vault_password" > $vault_password_file

  echo $vault_password_file
}

verbose_option() {
  local verbose=$(attr source verbose '""')
  test -n "$verbose" && echo "-$verbose"
}

check_option() {
  local check=$(attr params check false)
  test "$check" = "true" && echo "--check"
}

diff_option() {
  local diff=$(attr params diff false)
  test "$diff" = "true" && echo "--diff"
}

private_key_option() {
  echo "--private-key $ssh_private_key_file"
}

inventory_option() {
  local inventory=$(attr params inventory)
  echo "-i $inventory"
}

remote_user_option() {
  remote_user=$(attr source remote_user '""')
  test -n "$remote_user" && echo "-u $remote_user"
}

vault_password_option() {
  local vault_password_file=$(configure_vault)
  test -n "$vault_password_file" && echo "--vault-password-file $vault_password_file"
}

ssh_common_args_option() {
  local ssh_common_args=$(attr source ssh_common_args)
  if [ -z "$ssh_common_args" ]; then
    echo '--ssh-common-args=""'
  else
    echo "--ssh-common-args=$ssh_common_args"
  fi
}

become_option() {
  local become=$(attr params become false)
  test $become = true && echo "-b"
}

become_user_option() {
  local become_user=$(attr params become_user '""')
  test -n "$become_user" && echo "--become-user $become_user"
}

become_method_option() {
  local become_method=$(attr params become_method '""')
  test -n "$become_method" && echo "--become-method $become_method"
}

vars_option() {
  local vars=$(attr params vars '""')
  local vars_file=$(attr params vars_file '""')

  test -n "$vars" && test -n "$vars_file" && { echo "vars and vars_file params are mutually exclusive" >&2; exit 1; }

  if [ -n "$vars" ]; then
    echo "--extra-vars=$vars"
  elif [ -n "$vars_file" ]; then
    echo "--extra-vars=$(cat $vars_file)"
  else
    echo "--extra-vars={}"
  fi
}

playbook_argument() {
  local playbook=$(attr params playbook "site.yml")
  echo $playbook
}

run_command() {
  test $(attr source debug false) = "true" && set -x

  ansible-playbook \
    $(verbose_option) \
    $(check_option) \
    $(diff_option) \
    $(private_key_option) \
    $(inventory_option) \
    $(remote_user_option) \
    $(vault_password_option) \
    "$(ssh_common_args_option)" \
    "$(vars_option)" \
    $(become_option) \
    $(become_user_option) \
    $(become_method_option) \
    $(playbook_argument)
}

# Main

work_dir=$(attr params work_dir '""')
cd $source/$work_dir

ansible-playbook --version
configure_ssh
install_requirements
run_command

jq -n '{
  version: {}
}' >&3
